{"ast":null,"code":"var _jsxFileName = \"/Users/sjcy-mac/Documents/Microverse/react/bookstore/src/containers/BooksForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { createBook } from '../actions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst BooksForm = ({\n  bookCreator\n}) => {\n  _s();\n\n  const [bookInfo, setBookInfo] = useState({\n    title: '',\n    category: ''\n  });\n\n  const handleChange = e => {\n    if (e.target.id === 'titleInput') {\n      setBookInfo({ ...bookInfo,\n        title: e.target.value\n      });\n    } else {\n      setBookInfo({ ...bookInfo,\n        category: e.target.value\n      });\n    }\n  };\n\n  const handleSubmit = () => {\n    if (bookInfo.title !== '' && bookInfo.category !== '') {\n      bookCreator(bookInfo);\n      setBookInfo({\n        title: '',\n        category: ''\n      });\n    } else {\n      setBookInfo({ ...bookInfo\n      });\n    }\n  };\n\n  const categories = ['', 'Action', 'Biography', 'History', 'Horror', 'Kids', 'Learning', 'Sci-Fi'];\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"titleInput\",\n        children: [\"Book Title\", /*#__PURE__*/_jsxDEV(\"input\", {\n          onChange: handleChange,\n          id: \"titleInput\",\n          type: \"text\",\n          value: bookInfo.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"\",\n        children: [\"Category\", /*#__PURE__*/_jsxDEV(\"select\", {\n          id: \"categoryInput\",\n          onChange: handleChange,\n          value: bookInfo.category,\n          children: categories.map(cat => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: cat,\n            children: cat\n          }, cat, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSubmit,\n        type: \"button\",\n        children: \"Add Book\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(BooksForm, \"zeMZ4XsN8ecIUA7RsNbq/x2Hqlw=\");\n\n_c = BooksForm;\nBooksForm.propTypes = {\n  bookCreator: PropTypes.func.isRequired\n};\n\nconst mapDispatchToProps = dispatch => ({\n  bookCreator: book => {\n    dispatch(createBook(book));\n  }\n});\n\nexport default connect(null, mapDispatchToProps)(BooksForm);\n\nvar _c;\n\n$RefreshReg$(_c, \"BooksForm\");","map":{"version":3,"sources":["/Users/sjcy-mac/Documents/Microverse/react/bookstore/src/containers/BooksForm.js"],"names":["React","useState","connect","PropTypes","createBook","BooksForm","bookCreator","bookInfo","setBookInfo","title","category","handleChange","e","target","id","value","handleSubmit","categories","map","cat","propTypes","func","isRequired","mapDispatchToProps","dispatch","book"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { createBook } from '../actions';\n\nconst BooksForm = ({ bookCreator }) => {\n  const [bookInfo, setBookInfo] = useState({\n    title: '',\n    category: '',\n  });\n\n  const handleChange = e => {\n    if (e.target.id === 'titleInput') {\n      setBookInfo({ ...bookInfo, title: e.target.value });\n    } else {\n      setBookInfo({ ...bookInfo, category: e.target.value });\n    }\n  };\n\n  const handleSubmit = () => {\n    if (bookInfo.title !== '' && bookInfo.category !== '') {\n      bookCreator(bookInfo);\n      setBookInfo({ title: '', category: '' });\n    } else {\n      setBookInfo({ ...bookInfo });\n    }\n  };\n\n  const categories = ['', 'Action', 'Biography', 'History', 'Horror', 'Kids', 'Learning', 'Sci-Fi'];\n\n  return (\n    <>\n      <form>\n        <label htmlFor=\"titleInput\">\n          Book Title\n          <input onChange={handleChange} id=\"titleInput\" type=\"text\" value={bookInfo.title} />\n        </label>\n        <label htmlFor=\"\">\n          Category\n          <select id=\"categoryInput\" onChange={handleChange} value={bookInfo.category}>\n            {categories.map(cat => (\n              <option key={cat} value={cat}>{cat}</option>\n            ))}\n          </select>\n        </label>\n        <button onClick={handleSubmit} type=\"button\">Add Book</button>\n      </form>\n    </>\n  );\n};\n\nBooksForm.propTypes = {\n  bookCreator: PropTypes.func.isRequired,\n};\n\nconst mapDispatchToProps = dispatch => ({\n  bookCreator: book => { dispatch(createBook(book)); },\n});\n\nexport default connect(null, mapDispatchToProps)(BooksForm);\n"]},"metadata":{},"sourceType":"module"}