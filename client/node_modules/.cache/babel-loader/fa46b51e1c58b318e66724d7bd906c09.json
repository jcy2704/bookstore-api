{"ast":null,"code":"var _jsxFileName = \"/Users/sjcy-mac/Documents/Microverse/react/bookstore/src/containers/BooksList.js\";\n\n/* eslint-disable max-len */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport Book from '../components/Book';\nimport { removeBook } from '../actions/index';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst BooksList = ({\n  books,\n  filter,\n  delete: handleRemoveBook\n}) => {\n  const filteredBooks = () => {\n    if (filter === 'All') {\n      return books.sort((a, b) => a.id - b.id);\n    }\n\n    return books.filter(book => book.category === filter).sort((a, b) => a.id - b.id);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"ul\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_c = BooksList;\nBooksList.propTypes = {\n  books: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    category: PropTypes.string.isRequired\n  })).isRequired,\n  delete: PropTypes.func.isRequired,\n  filter: PropTypes.string.isRequired\n};\n\nconst mapStateToProps = state => ({\n  books: state.books,\n  filter: state.filter\n});\n\nconst mapDispatchToProps = dispatch => ({\n  delete: book => dispatch(removeBook(book))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BooksList);\n\nvar _c;\n\n$RefreshReg$(_c, \"BooksList\");","map":{"version":3,"sources":["/Users/sjcy-mac/Documents/Microverse/react/bookstore/src/containers/BooksList.js"],"names":["React","PropTypes","connect","Book","removeBook","BooksList","books","filter","delete","handleRemoveBook","filteredBooks","sort","a","b","id","book","category","propTypes","arrayOf","shape","number","isRequired","title","string","func","mapStateToProps","state","mapDispatchToProps","dispatch"],"mappings":";;AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,SAASC,UAAT,QAA2B,kBAA3B;;;;AAEA,MAAMC,SAAS,GAAG,CAAC;AACjBC,EAAAA,KADiB;AACVC,EAAAA,MADU;AACFC,EAAAA,MAAM,EAAEC;AADN,CAAD,KAEZ;AACJ,QAAMC,aAAa,GAAG,MAAM;AAC1B,QAAIH,MAAM,KAAK,KAAf,EAAsB;AACpB,aAAOD,KAAK,CAACK,IAAN,CAAW,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAACE,EAAF,GAAOD,CAAC,CAACC,EAA9B,CAAP;AACD;;AACD,WAAOR,KAAK,CAACC,MAAN,CAAaQ,IAAI,IAAIA,IAAI,CAACC,QAAL,KAAkBT,MAAvC,EAA+CI,IAA/C,CAAoD,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAACE,EAAF,GAAOD,CAAC,CAACC,EAAvE,CAAP;AACD,GALD;;AAOA,sBACE;AAAA,2BACE;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AAOD,CAjBD;;KAAMT,S;AAmBNA,SAAS,CAACY,SAAV,GAAsB;AACpBX,EAAAA,KAAK,EAAEL,SAAS,CAACiB,OAAV,CACLjB,SAAS,CAACkB,KAAV,CAAgB;AACdL,IAAAA,EAAE,EAAEb,SAAS,CAACmB,MAAV,CAAiBC,UADP;AAEdC,IAAAA,KAAK,EAAErB,SAAS,CAACsB,MAAV,CAAiBF,UAFV;AAGdL,IAAAA,QAAQ,EAAEf,SAAS,CAACsB,MAAV,CAAiBF;AAHb,GAAhB,CADK,EAMLA,UAPkB;AAQpBb,EAAAA,MAAM,EAAEP,SAAS,CAACuB,IAAV,CAAeH,UARH;AASpBd,EAAAA,MAAM,EAAEN,SAAS,CAACsB,MAAV,CAAiBF;AATL,CAAtB;;AAYA,MAAMI,eAAe,GAAGC,KAAK,KAAK;AAAEpB,EAAAA,KAAK,EAAEoB,KAAK,CAACpB,KAAf;AAAsBC,EAAAA,MAAM,EAAEmB,KAAK,CAACnB;AAApC,CAAL,CAA7B;;AAEA,MAAMoB,kBAAkB,GAAGC,QAAQ,KAAK;AACtCpB,EAAAA,MAAM,EAAEO,IAAI,IAAIa,QAAQ,CAACxB,UAAU,CAACW,IAAD,CAAX;AADc,CAAL,CAAnC;;AAIA,eAAeb,OAAO,CAACuB,eAAD,EAAkBE,kBAAlB,CAAP,CAA6CtB,SAA7C,CAAf","sourcesContent":["/* eslint-disable max-len */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport Book from '../components/Book';\nimport { removeBook } from '../actions/index';\n\nconst BooksList = ({\n  books, filter, delete: handleRemoveBook,\n}) => {\n  const filteredBooks = () => {\n    if (filter === 'All') {\n      return books.sort((a, b) => a.id - b.id);\n    }\n    return books.filter(book => book.category === filter).sort((a, b) => a.id - b.id);\n  };\n\n  return (\n    <>\n      <ul>\n        \n      </ul>\n    </>\n  );\n};\n\nBooksList.propTypes = {\n  books: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      category: PropTypes.string.isRequired,\n    }),\n  ).isRequired,\n  delete: PropTypes.func.isRequired,\n  filter: PropTypes.string.isRequired,\n};\n\nconst mapStateToProps = state => ({ books: state.books, filter: state.filter });\n\nconst mapDispatchToProps = dispatch => ({\n  delete: book => dispatch(removeBook(book)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BooksList);\n"]},"metadata":{},"sourceType":"module"}