{"ast":null,"code":"var _jsxFileName = \"/Users/sjcy-mac/Documents/Microverse/react/bookstore/src/containers/BooksList.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport Book from '../components/Book';\nimport { removeBook } from '../actions/index';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst BooksList = ({\n  books,\n  delete: handleRemoveBook\n}) => /*#__PURE__*/_jsxDEV(\"table\", {\n  children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n    children: [/*#__PURE__*/_jsxDEV(\"th\", {\n      children: \"Book ID\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n      children: \"Title\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n      children: \"Category\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 5\n  }, this), books.map(book => /*#__PURE__*/_jsxDEV(Book, {\n    book: book,\n    delete: handleRemoveBook\n  }, book.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 24\n  }, this))]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 8,\n  columnNumber: 3\n}, this);\n\n_c = BooksList;\nBooksList.propTypes = {\n  books: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    category: PropTypes.string.isRequired\n  })).isRequired,\n  delete: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => ({\n  books: state.books\n});\n\nconst mapDispatchToProps = dispatch => ({\n  delete: book => dispatch(removeBook(book))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BooksList);\n\nvar _c;\n\n$RefreshReg$(_c, \"BooksList\");","map":{"version":3,"sources":["/Users/sjcy-mac/Documents/Microverse/react/bookstore/src/containers/BooksList.js"],"names":["React","PropTypes","connect","Book","removeBook","BooksList","books","delete","handleRemoveBook","map","book","id","propTypes","arrayOf","shape","number","isRequired","title","string","category","func","mapStateToProps","state","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,SAASC,UAAT,QAA2B,kBAA3B;;;AAEA,MAAMC,SAAS,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA,MAAM,EAAEC;AAAjB,CAAD,kBAChB;AAAA,0BACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAJF,eAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAPF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF,EAYGF,KAAK,CAACG,GAAN,CAAUC,IAAI,iBAAI,QAAC,IAAD;AAAoB,IAAA,IAAI,EAAEA,IAA1B;AAAgC,IAAA,MAAM,EAAEF;AAAxC,KAAWE,IAAI,CAACC,EAAhB;AAAA;AAAA;AAAA;AAAA,UAAlB,CAZH;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;;KAAMN,S;AAiBNA,SAAS,CAACO,SAAV,GAAsB;AACpBN,EAAAA,KAAK,EAAEL,SAAS,CAACY,OAAV,CACLZ,SAAS,CAACa,KAAV,CAAgB;AACdH,IAAAA,EAAE,EAAEV,SAAS,CAACc,MAAV,CAAiBC,UADP;AAEdC,IAAAA,KAAK,EAAEhB,SAAS,CAACiB,MAAV,CAAiBF,UAFV;AAGdG,IAAAA,QAAQ,EAAElB,SAAS,CAACiB,MAAV,CAAiBF;AAHb,GAAhB,CADK,EAMLA,UAPkB;AAQpBT,EAAAA,MAAM,EAAEN,SAAS,CAACmB,IAAV,CAAeJ;AARH,CAAtB;;AAWA,MAAMK,eAAe,GAAGC,KAAK,KAAK;AAAEhB,EAAAA,KAAK,EAAEgB,KAAK,CAAChB;AAAf,CAAL,CAA7B;;AAEA,MAAMiB,kBAAkB,GAAGC,QAAQ,KAAK;AACtCjB,EAAAA,MAAM,EAAEG,IAAI,IAAIc,QAAQ,CAACpB,UAAU,CAACM,IAAD,CAAX;AADc,CAAL,CAAnC;;AAIA,eAAeR,OAAO,CAACmB,eAAD,EAAkBE,kBAAlB,CAAP,CAA6ClB,SAA7C,CAAf","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport Book from '../components/Book';\nimport { removeBook } from '../actions/index';\n\nconst BooksList = ({ books, delete: handleRemoveBook }) => (\n  <table>\n    <tr>\n      <th>\n        Book ID\n      </th>\n      <th>\n        Title\n      </th>\n      <th>\n        Category\n      </th>\n    </tr>\n    {books.map(book => <Book key={book.id} book={book} delete={handleRemoveBook} />)}\n  </table>\n);\n\nBooksList.propTypes = {\n  books: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      category: PropTypes.string.isRequired,\n    }),\n  ).isRequired,\n  delete: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = state => ({ books: state.books,  });\n\nconst mapDispatchToProps = dispatch => ({\n  delete: book => dispatch(removeBook(book)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BooksList);\n"]},"metadata":{},"sourceType":"module"}